import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üìå Registrar progresso de um exerc√≠cio
export const registerProgress = async (req, res) => {
  try {
    const { exerciseId } = req.params;
    const { weight, reps, set } = req.body;
    const userId = req.user.id;

    console.log('Dados recebidos:', { exerciseId, weight, reps, set, userId });

    // Valida√ß√£o b√°sica
    if (!weight || !reps || !set) {
      return res.status(400).json({ 
        error: 'Dados inv√°lidos',
        details: {
          weight: !weight ? 'Peso √© obrigat√≥rio' : null,
          reps: !reps ? 'Repeti√ß√µes s√£o obrigat√≥rias' : null,
          set: !set ? 'N√∫mero da s√©rie √© obrigat√≥rio' : null
        }
      });
    }

    // Verificar se o exerc√≠cio pertence a um treino do usu√°rio
    const exercise = await prisma.exercise.findUnique({
      where: { id: parseInt(exerciseId) },
      include: {
        workout: true,
        progress: {
          orderBy: {
            createdAt: 'desc'
          }
        }
      }
    });

    if (!exercise) {
      return res.status(404).json({ error: "Exerc√≠cio n√£o encontrado" });
    }

    if (exercise.workout.userId !== userId) {
      return res.status(403).json({ error: "N√£o autorizado" });
    }

    // Verificar se a s√©rie j√° foi registrada
    const existingSet = await prisma.progress.findFirst({
      where: {
        exerciseId: parseInt(exerciseId),
        set: parseInt(set)
      }
    });

    if (existingSet) {
      return res.status(400).json({ error: `A s√©rie ${set} j√° foi registrada` });
    }

    // Se n√£o foi fornecido um peso e existe um registro anterior, usar o mesmo peso
    const weightToUse = weight || (exercise.progress[0]?.weight || exercise.targetWeight || 0);

    const progress = await prisma.progress.create({
      data: {
        exerciseId: parseInt(exerciseId),
        weight: parseFloat(weightToUse),
        reps: parseInt(reps),
        set: parseInt(set)
      }
    });

    console.log('Progresso criado:', progress);

    // Verificar se todas as s√©ries foram completadas
    const completedSets = await prisma.progress.count({
      where: {
        exerciseId: parseInt(exerciseId)
      }
    });

    let message = 'Progresso registrado com sucesso';
    let suggestedWeight = null;

    if (completedSets === exercise.sets) {
      // Todas as s√©ries foram completadas
      const allSetsCompleted = exercise.progress.every(p => p.reps >= exercise.reps);
      
      if (allSetsCompleted) {
        suggestedWeight = weightToUse + 1.25;
        message = `Parab√©ns! Voc√™ completou todas as s√©ries. Sugerimos aumentar a carga para ${suggestedWeight}kg na pr√≥xima vez!`;
      }
    }

    res.json({ 
      progress,
      message,
      suggestedWeight,
      isCompleted: completedSets >= exercise.sets
    });

  } catch (error) {
    console.error("Erro ao registrar progresso:", error);
    res.status(500).json({ 
      error: "Erro ao registrar progresso",
      details: error.message
    });
  }
};

// üìå Listar progresso de um exerc√≠cio espec√≠fico
export const getExerciseProgress = async (req, res) => {
  const { exerciseId } = req.params;
  const userId = req.user.id;

  try {
    // Verificar se o exerc√≠cio pertence a um treino do usu√°rio
    const exercise = await prisma.exercise.findUnique({
      where: { id: parseInt(exerciseId) },
      include: {
        workout: true,
        progress: {
          orderBy: {
            set: 'asc'
          }
        }
      }
    });

    if (!exercise) {
      return res.status(404).json({ error: "Exerc√≠cio n√£o encontrado" });
    }

    if (exercise.workout.userId !== userId) {
      return res.status(403).json({ error: "N√£o autorizado" });
    }

    res.json(exercise.progress);
  } catch (error) {
    console.error("Erro ao buscar progresso:", error);
    res.status(500).json({ error: "Erro ao buscar progresso" });
  }
};

// üìå Listar hist√≥rico de progresso de um usu√°rio
export const getUserProgress = async (req, res) => {
  const userId = req.user.id;

  try {
    const progress = await prisma.progress.findMany({
      where: {
        exercise: {
          workout: {
            userId: userId,
          },
        },
      },
      include: { exercise: true },
      orderBy: { createdAt: "desc" },
    });

    res.json(progress);
  } catch (error) {
    console.error("Erro ao buscar hist√≥rico de progresso:", error);
    res.status(500).json({ error: "Erro ao buscar hist√≥rico de progresso." });
  }
}; 